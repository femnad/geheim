---
- hosts: localhost
  name: Cleanup local known hosts

  vars_files:
    - sync_vars.yml

  tasks:
    - name: Wait until DNS is resolving
      command: host {{ geheim_hoster }}
      register: geheim_ip
      retries: 10
      delay: 60
      until: geheim_ip.rc == 0

    - name: Remove existing known host(s)
      known_hosts:
        name: '{{ geheim_hoster }}'
        state: absent

    - name: Purge host keys of IPs from previous instances
      lineinfile:
        path: '{{ ansible_user_dir }}/.ssh/known_hosts'
        regexp: '^{{ geheim_ip.stdout.split()[-1] }} .*'
        state: absent

    - name: Check hashed known hosts for hostname
      command: ssh-keygen -H -F {{ geheim_hoster }}
      register: ssh_keygen_hostname
      failed_when: ssh_keygen_hostname.rc not in [0, 1]

    - name: Purge hashed known hosts of matched hostname
      lineinfile:
        path: '{{ ansible_user_dir }}/.ssh/known_hosts'
        line: '{{ ssh_keygen_hostname.stdout_lines[-1] }}'
        state: absent
      when: ssh_keygen_hostname.rc == 0

    - name: Check hashed known hosts for IP
      command: ssh-keygen -H -F {{ geheim_ip.stdout.split()[-1] }}
      register: ssh_keygen_ip
      failed_when: ssh_keygen_ip.rc not in [0, 1]

    - name: Purge hashed known hosts of matched IP
      lineinfile:
        path: '{{ ansible_user_dir }}/.ssh/known_hosts'
        line: '{{ ssh_keygen_ip.stdout_lines[-1] }}'
        state: absent
      when: ssh_keygen_ip.rc == 0

    - name: Pause for 5 seconds
      pause:
        seconds: 5

    - name: Add keys for host
      shell: ssh-keyscan {{ geheim_hoster }} | grep ecdsa-sha2-nistp256 >> '{{ ansible_user_dir }}/.ssh/known_hosts'

- hosts: geheim_mgt
  name: Initialise the server with the repository
  remote_user: '{{ geheim_ssh_user }}'

  vars_files:
    - public_vars.yml
    - sync_vars.yml

  vars:
    encryption_passphrase_lookup_key: '{{ password_lookup_key }}'
    encryption_passphrase: "{{ lookup('passwordstore', encryption_passphrase_lookup_key) }}"
    no_wait_var: GEHEIM_NO_WAIT

  tasks:
    - name: Add the user
      user:
        name: '{{ repo_user_name }}'
        shell: /bin/bash
      become: yes

    - name: Get public keys from GitHub
      uri:
        url: https://api.github.com/users/{{ github_username }}/keys
        return_content: yes
        body_format: json
      register: github_public_keys

    - name: Add authorized keys
      authorized_key:
        key: '{{ item.key }}'
        user: '{{ repo_user_name }}'
      loop: '{{ github_public_keys.json }}'
      become: yes

    - name: Install required packages
      package:
        name:
          - cryptsetup
          - git
      become: yes

    - name: Save the key file
      lineinfile:
        path: '{{ keyfile_path }}'
        create: yes
        owner: root
        group: root
        mode: '0400'
        line: '{{ encryption_passphrase }}'
      become: yes
      tags: volume-ready

    - name: Remove new line character from the key file
      replace:
        path: '{{ keyfile_path }}'
        regexp: '\n'
        replace: ''
      become: yes
      tags: volume-ready

    - name: Open the device
      command: cryptsetup open {{ device_path }} {{ mapping_name }} --key-file {{ keyfile_path }}
      become: yes
      args:
        creates: '/dev/mapper/{{ mapping_name }}'
      tags: volume-ready

    - name: Shred the key file
      command: shred '{{ keyfile_path }}'
      become: yes

    - name: Remove the key file
      file:
        path: '{{ keyfile_path }}'
        state: absent
      become: yes

    - name: Initialize the mount path
      file:
        path: '{{ absolute_mount_path }}'
        state: directory
        owner: '{{ repo_user_name}}'
        group: '{{ repo_user_name}}'
      become: yes

    - name: Mount the device
      mount:
        src: '{{ device_mapped_path }}'
        path: '{{ absolute_mount_path }}'
        fstype: ext4
        state: mounted
      become: yes

    - name: Make sure user ownership is correct
      file:
        state: directory
        path: '{{ absolute_mount_path }}'
        owner: '{{ repo_user_name }}'
        group: '{{ repo_user_name }}'
        recurse: yes
      become: yes

    - name: Git sync
      shell: |
        git pull -r
        git push
      args:
        chdir: '{{ ansible_user_dir }}/.password-store'
      delegate_to: localhost

    - name: Show notification
      command: notify-send '{{ ansible_play_name }}' 'Ready for sync'
      delegate_to: localhost
      when: not lookup('env', no_wait_var)

    - pause:
        prompt: Continue when the sync has been done
      when: not lookup('env', no_wait_var)

    - name: Post git sync
      shell: |
        git pull -r
        git push
      args:
        chdir: '{{ ansible_user_dir }}/.password-store'
      delegate_to: localhost
      when: not lookup('env', no_wait_var)

    - name: Sync disks
      command: sync
      become: yes

    - name: Unmount the device
      mount:
        path: '{{ absolute_mount_path }}'
        state: unmounted
      become: yes

    - name: Close the device
      command: cryptsetup close {{ mapping_name }}
      become: yes
...
